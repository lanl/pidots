October 2010

New version v.3.10.10
Updates to previous version v.3.10.4
1. Adopted MPI_WTIME as the timing routine instead of CPU_TIME. Eases portability to LANL systems.
2. Adopt the changes of v.3.10.4 TRIM (v.3.10.10--TRIM). Namely IDO only with direct/factored system,
    and only 1 group.
3. Added the 'd0' label to all real*8 constants in the code to ensure proper precision, i.e. avoid junk
    data being added to a constant. (E.g., want 0.125000000000000 and not 0.125000001290345)

#######################################################################################################

April 2010

New version v.3.10.4
Updates to previous version v.3.9.12
Update code to reflect improvements to the standard PBJ code
1. Added preconditioners to local CG solutions
2. Added SOR type local solution subroutine
3. Reorganized IDOMATS to only invert I-Jphi if requested by the INVF flag from input
4. Added piv and dv to solvar only to be allocated if needed.
5. Reset IDOT to solve factorized LU problem instead of multiplying with the inverted matrix
6. Changed nx*ny, nx*nz, ny*nz operations to stored variables xys, xzs, and yzs, respectively
7. Fixed allocation of arrays using these values
8. Added phiold initialization in SOLVE
9. Reorganized all CG routines to get phi, check convergence immediately, then get new sd if needed
10. CG and SOR routines all use current value of phi as initial guess in the iterative scheme instead of 0.0
11. Changed ECHO to reflect additional inputs.

#######################################################################################################

December 2009

New version v.3.9.12-Multiple Sub-Domains per Processor with Red-Black Iterations
Updates to previous version v.1.9.11
1. New code to solve the problem with multiplie sub-domains per processor
2. Allows use of red-black Gauss-Seidel iterations
3. Input and psds changed to accept a user defined processor topology.
4. Input now includes the size of each sub-domain and program divides up the sub-domains on each
    processor using this information.
5. Iterative sequence now a red-black Gauss-Seidel solution. Each sub-domain is given a red or black
    marker.
6. Each processor loops over all the sub-domains it owns making the operators.
7. Then loop over IDOT for all the red/black sub-domains, accumulating phi and psio values.
8. Call for copying/communication from red/black sub-domains to black/red sub-domains.
9. Repeat for other half. Do until convergence.
10. Changed gathering routines to account for scheme to distribute work.

######################################################################################################

November 2009

New version v.1.9.11
Updates to improve previous version v1.9.10
1. Rework the AFCM-CONK relationship.
2. Instead of copying an entire row (or column with Transpose flag on) of kmat from conk's ktmp, just
    copy the necessary elements that have been changed.
3. Use ktmpx, ktmpy, ktmpz to update the non-continuous pieces of the row.
4. Call conk once, get the three ktmp arrays and place them accordingly.

Directory "tests" has test cases to show consistent results and improved timings.

#######################################################################################################

October 2009

New version v.1.9.10
Updates to improve previous version v1.9.7
1. Add the 'tpose' flag to the input that refers to constructing TRANSPOSED operators Jphi, Kphi, Jpsi, Kpsi
2. tpose = 1: yes construct transpose. tpose = 0: no
3. Rewrite IDOMATS to perform options based on whether or not tpose = 1. Different loops to perform identical
    matrix and vector operations
4. Rewrite JIMA and AFCM to construct the operators normal or transposed based on tpose.
5. Allocate accordingly in SOLVE based on tpose
6. Add to ECHO the transposed operation or not
7. Change CGSOLVE to have the relative difference between successive iterates instead of convergence based
    on the residual. Suffer the penalty for better accuracy.
8. Set the IDOT operations based on tpose. Old ones use MATMUL, new ones use loops of repetitive dot products.
9. Replace the jmat*kmat loops in IDOMATS with calls to blas sub-routine DGEMM.


Comparison runs with old method as well as validation of results in directory "tests"
Further timing tests in vFiner-timing

#######################################################################################################

July 2009

New version v1.9.7
Updates to improve previous version v1.9.6.1
1. Improved output options
2. Removed the angular flux print option that wasn't needed
3. Added an iterative data print option so it can be there if needed but removed for better I/O
4. Made further changes to optimize performance
5. Used improved index orderings of xmat, ymat, zmat
6. Removed conab and cong and placed all the work into gammas
7. Improved matrix-multiplication of jphi*kphi in IDOMATS

######################################################################################################

June 2009

New version: v1.9.6.1
Updates to improve previous version v1.9.6
1. Remove all references to spatial orders. Including removing the references in INPUT.
2. Use fewer array indices, leaving out spatial order indices
3. Get rid of WEIGHT routine and alpha, beta, gamma variables
4. Improve conab, cong, gammas to perform only necessary operations, not have generic loops for spatial orders
5. Use analytical expressions for inverse of amat multiplied with bmat to form gmat 

######################################################################################################

June 2009

Pidosits code.
Three-dimensional case.

First Version that uses ONLY the diamond difference discretization

Modified from AHOT-N-3D Pidosits in the following ways:
Starting from ahot-n-3d pidosits v1.9.6
1. Rewrite the WEIGHT sub-routine to compute the ex, ey, ez and set alpha, beta, and gamma to zero.
2. No other changes to utilize the DD method.
